pipeline {
    agent any

    tools {
        jdk 'jdk'
        nodejs 'node18'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/azharism/bingo1.git'
            }
        }

        stage('Gitleaks Scan') {
            steps {
                sh '''
                    curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
                    chmod +x gitleaks
                    ./gitleaks detect --source . --report-path=gitleaks-report.json || true
                '''
            }
        }

        stage("Sonarqube Analysis ") {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Bingo \
                        -Dsonar.projectKey=Bingo
                    '''
                }
            }
        }

        stage("quality gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('TRIVY FS SCAN') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }

        stage("Docker Build & Push") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker-cred') {
                        sh "docker build -t bingo ."
                        sh "docker tag bingo 88151/bingo:latest"
                        sh "docker push 88151/bingo:latest"
                    }
                }
            }
        }

        stage("TRIVY") {
            steps {
                sh 'trivy image 88151/bingo:latest > trivyimage.txt'
            }
        }

        stage('Deploy to container') {
            steps {
                sh 'docker run -d --name bingo -p 3000:3000 88151/bingo:latest'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'gitleaks-report.json', onlyIfSuccessful: true
        }
    }
}
